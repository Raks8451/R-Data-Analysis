as.Date('April 26 2001',format='%B %d %Y')
as.Date('22Jun01',format='%d%b%y')
format(as.Date('1/13/99',format='%m/%d/%y'),'%d-%m-%Y')
sim(is.na(census$AGE))
sum(is.na(census$AGE))
instance.mean <- round(mean(census$AGE,na.rm=T),0)
instance.mean
instance.mean <- round(mean(census$AGE,na.rm=T))
instance.mean
instance.mean <- round(mean(census$AGE,na.rm=T),0)
instance.mean
census$AGE[is.na(census$AGE)] <- instance.mean
census$capitalgain[is.na(census$capitalgain)]<-0
sum(is.na(census$capitalgain))
View(census)
census$gender[census$gender=='?']<-NA
sum(census$gender)
sum(census$gender=='?')
table(census$gender)
census$gender[census$gender=='?']<-NA
View(census)
sum(census$gender=='?')
table(census$gender)
sum(is.na(census$gender))
census$gender<-as.character(census$capitalgain)
table(census$gender)
table(census$gender)
census$gender[census$gender=='?']<-NA
sum(census$gender=='?')
table(census$gender)
table(census$gender)
census$gender[census$gender=='?']<-NA
sum(census$gender=='?')
table(census$gender)
sum(is.na(census$gender))
census$gender<-as.character(census$capitalgain)
table(census$gender)
View(census)
setwd("D:\\Rakshith\\Documents\\R programming\\R exercise data")
census <- read.csv("income_Census.csv",header=F)
View(census)
##### data Preparation(pre-processing)
## 1. data cleaning
## 2. Feature Engineering
########################
#            DATA CLEANING
########################
##  In this section we will see
## important data
## basic data cleaning
## 1. de-duplication'
## 2. removing redundancy
## 3. correcting data types
## Feature specific data cleaning
# 1. missing value treatment
# 2. outlier treatment
setwd("D:\\Rakshith\\Documents\\R programming\\R exercise data")
census <- read.csv("income_Census.csv",header=F)
View(census)
names(census)<- c("age","industrycode","education","educationnum","maritalstatus","relationship","race","gender","capitalgain","capitalloss","hoursperweek","GT50K")
str(census)
## 1. de-duplication --> manual process,
## check the duplicate
sum(duplicated(census))
## removing duplicates - first way
df <- unique(census)
df
View(df)
sum(duplicated(df))
## second one
df1<- census[!duplicated(census),]
sum(duplicated(df1))
## third way--> only if primary key exists
## df1<- census[!duplicated(census$PrimaryKeyColumn)]
## 2. removing redundancy
## homonyms (same columns names but different informations)
## synonyms (different columns names but same informations)
## to deal with homonyms --> change column names
colnames(census)[1] <- "AGE"
colnames(census)[c(1,2,3)] <- c("AGE","IndustryCode","Education")
## to deal with synonyms--> delete one column
## correct format
str(census)
census$educationnum <- as.factor(census$educationnum)
View(census)
str(census)
## correct the date format
as.Date('1/15/2001',format='%m/%d/%Y')
as.Date('April 26 2001',format='%B %d %Y')
as.Date('22Jun01',format='%d%b%y')
## change the default format of R
format(as.Date('1/13/99',format='%m/%d/%y'),'%d-%m-%Y')
sum(is.na(census$AGE))
instance.mean <- round(mean(census$AGE,na.rm=T),0)
instance.mean
census$AGE[is.na(census$AGE)] <- instance.mean
census$capitalgain[is.na(census$capitalgain)]<-0
sum(is.na(census$capitalgain))
View(census)
census$gender[census$gender=='?']<-NA
View(census)
sum(census$gender=='?')
table(census$gender)
sum(is.na(census$gender))
census$gender<-as.character(census$capitalgain)
str(census)
census$gender<-as.character(census$gender)
str(census)
##### data Preparation(pre-processing)
## 1. data cleaning
## 2. Feature Engineering
########################
#            DATA CLEANING
########################
##  In this section we will see
## important data
## basic data cleaning
## 1. de-duplication'
## 2. removing redundancy
## 3. correcting data types
## Feature specific data cleaning
# 1. missing value treatment
# 2. outlier treatment
setwd("D:\\Rakshith\\Documents\\R programming\\R exercise data")
census <- read.csv("income_Census.csv",header=F)
View(census)
names(census)<- c("age","industrycode","education","educationnum","maritalstatus","relationship","race","gender","capitalgain","capitalloss","hoursperweek","GT50K")
str(census)
## 1. de-duplication --> manual process,
## check the duplicate
sum(duplicated(census))
## removing duplicates - first way
df <- unique(census)
df
View(df)
sum(duplicated(df))
## second one
df1<- census[!duplicated(census),]
sum(duplicated(df1))
## third way--> only if primary key exists
## df1<- census[!duplicated(census$PrimaryKeyColumn)]
## 2. removing redundancy
## homonyms (same columns names but different informations)
## synonyms (different columns names but same informations)
## to deal with homonyms --> change column names
colnames(census)[1] <- "AGE"
colnames(census)[c(1,2,3)] <- c("AGE","IndustryCode","Education")
## to deal with synonyms--> delete one column
## correct format
str(census)
census$educationnum <- as.factor(census$educationnum)
View(census)
str(census)
## correct the date format
as.Date('1/15/2001',format='%m/%d/%Y')
as.Date('April 26 2001',format='%B %d %Y')
as.Date('22Jun01',format='%d%b%y')
## change the default format of R
format(as.Date('1/13/99',format='%m/%d/%y'),'%d-%m-%Y')
## why missing values and outlier occur?
## way of collection
## method of the storage in wharehouse
## way of importing from different sources
## impact of outlier
## wrong information(but not always)
## impact of missing value
## represents a loss of information
## reduce accuracy
## missing value treatment
## 1. remove the missing values
## impact(loss of information)
## 2. replace with appropriate values - (zero, mean) --> numeric values, mode--> categorical variables
sum(is.na(census$AGE))
## calculate the mean
instance.mean <- round(mean(census$AGE,na.rm=T),0)
instance.mean
## replace the missing value with mean
census$AGE[is.na(census$AGE)] <- instance.mean
census$capitalgain[is.na(census$capitalgain)]<-0
sum(is.na(census$capitalgain))
View(census)
census$gender[census$gender=='?']<-NA
sum(census$gender=='?')
table(census$gender)
sum(is.na(census$gender))
str(census)
census$gender<-as.character(census$gender)
table(census$gender)
str(census)
census$gender[is.na(census$gender)]<-"Male"
census$gender<-as.factor(census$gender)
str(census)
table(census$gender)
setwd("D:\\Rakshith\\Documents\\R programming\\R exercise data")
credit<-read.csv("CREDIT.csv")
setwd("D:\\Rakshith\\Documents\\R programming\\NEW")
credit<-read.csv("credit (3).csv")
boxplot(credit$amount)
x<-credit$amount
outlier_values<- boxplot.stats(credit$amount)$out
qnt<-quantile(x,probs=c(.01,.02,.03,.04,.05,.1,.15,.2,.25,.3,.35,.4,.45,.5,.55,.6,.65,.7,.75,.8,.85,.9,.95,1),na.rm=T)
caps<- quantile(x,probs=c(.05,.95),na.rm=T)
caps
H <- 1.5*IQR(x,na.rm = T)
H
qnt<-quantile(x,probs=c(.01,.02,.03,.04,.05,.1,.15,.2,.25,.3,.35,.4,.45,.5,.55,.6,.65,.7,.75,.8,.85,.9,.95,1),na.rm=T)
qntcaps<- quantile(x,probs=c(.05,.95),na.rm=T)
caps<- quantile(x,probs=c(.05,.95),na.rm=T)
qnt
x[x<(qnt[1]-H)]<-caps[1]
qnt<-quantile(x,probs=c(.01,.02,.03,.04,.05,.1,.15,.2,.25,.3,.35,.4,.45,.5,.55,.6,.65,.7,.75,.8,.85,.9,.95,1),na.rm=T)
qnt
qnt[1]
qnt[2]
x<-credit$amount
qnt<-quantile(x,probs=c(.01,.02,.03,.04,.05,.1,.15,.2,.25,.3,.35,.4,.45,.5,.55,.6,.65,.7,.75,.8,.85,.9,.95,1),na.rm=T)
qnt
caps<- quantile(x,probs=c(.05,.95),na.rm=T)
caps
boxplot(x)
x<-credit$amount
qnt<-quantile(x,probs=c(.01,.02,.03,.04,.05,.1,.15,.2,.25,.3,.35,.4,.45,.5,.55,.6,.65,.7,.75,.8,.85,.9,.95,1),na.rm=T)
qnt
caps<- quantile(x,probs=c(.05,.95),na.rm=T)
caps
H <- 1.5*IQR(x,na.rm = T)
H
x[x<(qnt[1]-H)]<-caps[1]
x[x>(qnt[2]+H)]<-caps[2]
boxplot(x)
qnt[1]
qnt[2]
boxplot(x)
x<-credit$amount
boxplot(x)
qnt<-quantile(x,probs=c(.01,.02,.03,.04,.05,.1,.15,.2,.25,.3,.35,.4,.45,.5,.55,.6,.65,.7,.75,.8,.85,.9,.95,1),na.rm=T)
qnt
caps<- quantile(x,probs=c(.05,.95),na.rm=T)
caps
H <- 1.5*IQR(x,na.rm = T)
H
x[x<(caps[1]-H)]<-caps[1]
x[x>(caps[2]+H)]<-caps[2]
boxplot(x)
census$Workload[census$hoursperweek>45] <- "High"
census$Workload[census$hoursperweek<40] <- "Low"
census$Workload[which(census$hoursperweek<=45 & census$hoursperweek>=40)] <- "Med"
str(census)
View(census)
table(census$gender)
qnt<-quantile(x,probs=c(.05,.95),na.rm=T)
qnt
caps<- quantile(x,probs=c(.05,.95),na.rm=T)
caps
unique(census$gender)
census$gender[is.na(census$gender)]<-"Male    "
install.packages("titanic")
library(titanic)
data("titanic")
data("titanic_train")
head(titanic_train)
View(titanic_train)
library(titanic)
summary(titanic_train$Age)
summary(titanic_train$Fare)
sd(titanic_train$Age,na.rm=T)
var(titanic_train$Fare)
sd(titanic_train$Age,na.rm=T)
var(titanic_train$Age,na.rm=T)
var(titanic_train$Fare)
mean(titanic_train[titanic_train$Pclass==1,"Fare"])
mean(titanic_train[titanic_train$Pclass==2,"Fare"])
mean(titanic_train[titanic_train$Pclass==3,"Fare"])
summary(titanic$Age)
library(titanic)
titanic=titanic_train
summary(titanic$Age)
quantile(titanic_train$Age,probs=0.75,na.rm=T)
quantile(titanic_train$Age,0.75,na.rm=T)
qnorm(0.75,mean=29.69912,sd=14.5265)
quantile(titanic$Age,probs = c(0.025,0.975),na.rm = T)
qnorm(0.975,mean=29.69912,sd=14.5265)-qnorm(0.025,mean=29.69912,sd=14.5265)
qnorm(c(0.025,0.975),mean=mean(titanic_train$Age,na.rm=T),sd=sd(titanic_train$Age,na.rm=T))
pnorm(c(0.025,0.975),mean=mean(titanic_train$Age,na.rm=T),sd=sd(titanic_train$Age,na.rm=T))
qnorm(c(0.025,0.975),mean=mean(titanic_train$Age,na.rm=T),sd=sd(titanic_train$Age,na.rm=T))
quantile(titanic$Age,probs = c(0.025,0.975),na.rm = T)
qnorm(0.975,mean=29.69912,sd=14.5265)-qnorm(0.025,mean=29.69912,sd=14.5265)
qnorm(c(0.025,0.975),mean=mean(titanic_train$Age,na.rm=T),sd=sd(titanic_train$Age,na.rm=T))
?dnorm
k = dnorm(titanic_train$Age,mean = 29.69912,sd=14.5265)
k
k = dnorm(titanic_train$Age,mean = 29.69912,sd=14.5265)
k
plot(titanic_train$Age,k,type="l")
?dnorm
z=(titanic_train$Fare-mean(titanic_train$Fare))/sd(titanic_train$Fare)
z
range(z)
range(titanic_train$Fare)
scale(titanic_train$Fare)
range(z)
range(titanic_train$Fare)
sdn = (titanic_train$Fare-min(titanic_train$Fare))/(max(titanic_train$Fare)-min(titanic_train$Fare))
sdn
range(sdn)
minmax=function(x){
return(x-min(x)/max(x)-min(x))
}
minmax(titanic_train$fare)
minmax(titanic_train$Fare)
minmax(titanic_train$Fare)
minmax=function(x){
return(x-min(x))/(max(x)-min(x))
}
minmax(titanic_train$Fare)
minmax=function(x){
return((x-min(x))/(max(x)-min(x)))
}
minmax(titanic_train$Fare)
zscore=function(x){
return((x-mean(x))/(sd(x)))
}
zscore(titanic_train$Fare)
mean(titanic_train$Age, by=list(titanic_train$Sex),FUN=mean,na.rm=TRUE)
mean(titanic_train$Age, by=list(titanic_train$Sex=="male"),FUN=mean,na.rm=TRUE)
mean(titanic_train[titanic_train$Sex=="male","AGE"])
str(titanic_train$Sex)
aggregate(titanic_train$Age, by=list(titanic_train$Sex),FUN=mean,na.rm=TRUE)
quantile(titanic_train$Age,probs=0.75,na.rm=T)
k = dnorm(titanic_train$Age,mean = 29.69912,sd=14.5265)
k
?dnorm
plot(titanic_train$Age,k,type="l")
ggplot(titanic_train,aes(titanic_train$Age))+geom_line()
ggplot(titanic_train,aes(x=titanic_train$Age,y=density))+geom_line()
ggplot(k,aes(titanic_train$Age))+geom_line()
k = as.factor(titanic_train$age)
k = as.factor(titanic_train$Age)
ggplot(k,aes(titanic_train$Age))+geom_line()
ggplot(k,aes(titanic_train$Age))+geom_density()
k = dnorm(titanic_train$Age,mean = 29.69912,sd=14.5265)
k = as.character(titanic_train$Age)
ggplot(k,aes(titanic_train$Age))+geom_density()
library(titanic)
data("titanic_train")
head(titanic_train)
View(titanic_train)
ggplot(k,aes(titanic_train$Age))+geom_density()
ggplot(k,aes(Age))+geom_density()
data("titanic")
data("titanic_train")
head(titanic_train)
View(titanic_train)
install.packages("titanic")
## 1.
library(titanic)
## 2.
data("titanic")
data("titanic_train")
head(titanic_train)
View(titanic_train)
## 3.
summary(titanic_train$Age)
## 4.
summary(titanic_train$Fare)
## 5.
var(titanic_train$Age,na.rm=T)
sd(titanic_train$Age,na.rm=T)
var(titanic_train$Fare)
sd(titanic_train$Fare)
## 6.
IQR(titanic_train$Fare)
var(titanic_train$Pclass)
sd(titanic_train$Survived)
## 7.
titanic_train <- sample(1:500)
titanic_train
sample((1:nrow(titanic_train)),500,replace=F)
## 8.
aggregate(titanic_train$Fare,by=list(titanic_train$Pclass),FUN=mean,na.rm=TRUE)
## 9.
mean(titanic_train[titanic_train$Pclass==1,"Fare"])
mean(titanic_train[titanic_train$Pclass==2,"Fare"])
mean(titanic_train[titanic_train$Pclass==3,"Fare"])
## 11.
mean(titanic_train$Age,na.rm=T)
sd(titanic_train$Age,na.rm = T)
1- pnorm(50, mean=29.69912,sd=14.5265)
pnorm(50, mean=29.69912,sd=14.5265,lower.tail = F)
## 12.
pnorm(50, mean=29.69912,sd=14.5265)-pnorm(40, mean=29.69912,sd=14.5265)
## 13.
quantile(titanic_train$Age,probs=0.75,na.rm=T)
quantile(titanic_train$Age,0.75,na.rm=T)
qnorm(0.75,mean=29.69912,sd=14.5265)
## 14.
qnorm(0.975,mean=29.69912,sd=14.5265)-qnorm(0.025,mean=29.69912,sd=14.5265)
qnorm(c(0.025,0.975),mean=mean(titanic_train$Age,na.rm=T),sd=sd(titanic_train$Age,na.rm=T))
install.packages("titanic")
library(titanic)
## 2.
data("titanic")
data("titanic_train")
head(titanic_train)
View(titanic_train)
## 3.
summary(titanic_train$Age)
## 4.
summary(titanic_train$Fare)
## 5.
var(titanic_train$Age,na.rm=T)
sd(titanic_train$Age,na.rm=T)
var(titanic_train$Fare)
sd(titanic_train$Fare)
## 6.
IQR(titanic_train$Fare)
var(titanic_train$Pclass)
sd(titanic_train$Survived)
## 7.
titanic_train <- sample(1:500)
titanic_train
sample((1:nrow(titanic_train)),500,replace=F)
## 8.
aggregate(titanic_train$Fare,by=list(titanic_train$Pclass),FUN=mean,na.rm=TRUE)
## 9.
mean(titanic_train[titanic_train$Pclass==1,"Fare"])
mean(titanic_train[titanic_train$Pclass==2,"Fare"])
mean(titanic_train[titanic_train$Pclass==3,"Fare"])
## 11.
mean(titanic_train$Age,na.rm=T)
sd(titanic_train$Age,na.rm = T)
1- pnorm(50, mean=29.69912,sd=14.5265)
pnorm(50, mean=29.69912,sd=14.5265,lower.tail = F)
## 12.
pnorm(50, mean=29.69912,sd=14.5265)-pnorm(40, mean=29.69912,sd=14.5265)
## 13.
quantile(titanic_train$Age,probs=0.75,na.rm=T)
quantile(titanic_train$Age,0.75,na.rm=T)
qnorm(0.75,mean=29.69912,sd=14.5265)
## 14.
qnorm(0.975,mean=29.69912,sd=14.5265)-qnorm(0.025,mean=29.69912,sd=14.5265)
qnorm(c(0.025,0.975),mean=mean(titanic_train$Age,na.rm=T),sd=sd(titanic_train$Age,na.rm=T))
library(titanic)
data("titanic")
data("titanic_train")
head(titanic_train)
View(titanic_train)
summary(titanic_train$Age)
summary(titanic_train$Fare)
var(titanic_train$Age,na.rm=T)
sd(titanic_train$Age,na.rm=T)
var(titanic_train$Fare)
sd(titanic_train$Fare)
IQR(titanic_train$Fare)
var(titanic_train$Pclass)
sd(titanic_train$Survived)
sample((1:nrow(titanic_train)),500,replace=F)
aggregate(titanic_train$Fare,by=list(titanic_train$Pclass),FUN=mean,na.rm=TRUE)
mean(titanic_train[titanic_train$Pclass==1,"Fare"])
mean(titanic_train[titanic_train$Pclass==2,"Fare"])
mean(titanic_train[titanic_train$Pclass==3,"Fare"])
mean(titanic_train$Age,na.rm=T)
sd(titanic_train$Age,na.rm = T)
1- pnorm(50, mean=29.69912,sd=14.5265)
pnorm(50, mean=29.69912,sd=14.5265,lower.tail = F)
pnorm(50, mean=29.69912,sd=14.5265)-pnorm(40, mean=29.69912,sd=14.5265)
quantile(titanic_train$Age,probs=0.75,na.rm=T)
quantile(titanic_train$Age,0.75,na.rm=T)
qnorm(0.75,mean=29.69912,sd=14.5265)
qnorm(0.975,mean=29.69912,sd=14.5265)-qnorm(0.025,mean=29.69912,sd=14.5265)
k = dnorm(titanic_train$Age,mean = 29.69912,sd=14.5265)
ggplot(k,aes(Age))+geom_density()
library("ggplot2", lib.loc="~/R/win-library/3.4")
ggplot(titanic,aes(Age))+geom_density()
ggplot(titanic,aes(Age),na.rm=T)+geom_density()
ggplot(titanic_train,aes(Age),na.rm=T)+geom_density()
k = dnorm(titanic_train$Age,mean = 29.69912,sd=14.5265)
plot(titanic_train$Age,k,type="l")
plot(density(titanic$Age,na.rm=T),main = "Age Plot",xlab = "Age",ylab = "Density")
ggplot(titanic_train,aes(Age),na.rm=T)+geom_density()
plot(density(titanic$Age,na.rm=T),main = "Age Plot",xlab = "Age",ylab = "Density")
?dnorm
?rnorm
scale(titanic_train$Fare)
zscore(titanic_train$Fare)
z
z=(titanic_train$Fare-mean(titanic_train$Fare))/sd(titanic_train$Fare)
z
range(z)
range(titanic_train$Fare)
t.test(titanic$Age ~ titanic$Sex, alternative="less")
t.test(titanic$Age ~ titanic$Sex)
t.test(titanic$Age ~ titanic$Sex)
t.test(titanic$Age ~ titanic$Sex, alternative="less")
prop.table(table(titanic$Survived))[2]
prop.table(table(titanic[titanic$Sex=="male","Survived"]))[2]
prop.table(table(titanic[titanic$Sex=="female","Survived"]))[2]
prop.table(table(titanic[titanic$Sex=="male" & titanic$Pclass==2,"Survived"]))[2]
prop.table(table(titanic$Survived))[2]
table(titanic$Survived)
prop.table(table(titanic$Survived))
prop.table(table(titanic[titanic$Sex=="male","Survived"]))
prop.table(table(titanic[titanic$Sex=="male","Survived"]))[2]
prop.table(table(titanic[titanic$Sex=="female","Survived"]))
prop.table(table(titanic[titanic$Sex=="male","Survived"]))[2]
prop.table(table(titanic[titanic$Sex=="male","Survived"]))[2]/prop.table(table(titanic[titanic$Sex=="male","Survived"]))[1]
femaleodd<-prop.table(table(titanic[titanic$Sex=="female","Survived"]))[2]/prop.table(table(titanic[titanic$Sex=="female","Survived"]))[1]
menodd<-prop.table(table(titanic[titanic$Sex=="male","Survived"]))[2]/prop.table(table(titanic[titanic$Sex=="male","Survived"]))[1]
menodd
femaleodd
menodd/femaleodd
options(scipen = 999) ## to convert scientific notation to normal decimal
